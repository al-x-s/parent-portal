generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  registeredAt   DateTime  @default(now())
  accounts       Account[]
  sessions       Session[]
  children       Student[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Student {
  id                  String     @id @default(cuid())
  firstName           String
  lastName            String
  grade               Int
  school              School     @relation(fields: [schoolId], references: [id])
  schoolId            String
  instrument          String
  hirePurchaseOptions String
  registeredAt        DateTime   @default(now())
  parent              User       @relation(fields: [parentId], references: [id])
  parentId            String
  currentBook         MethodBook? @relation(fields: [currentBookId], references: [id])
  currentBookId       String?
  currentSong         Int?
  compeltedBooks      Json[]
}

model MethodBook {
  id       String    @id @default(cuid())
  name     String
  numSongs Int
  Student  Student[]
}

model Event {
  id       String   @id @default(cuid())
  name     String
  location String
  start    DateTime
  finish   DateTime
  details  String?
  school   School   @relation(fields: [schoolId], references: [id])
  schoolId String
  band     Json[]
}

model School {
  id      String    @id @default(cuid())
  name    String
  bands   Json[]
  Event   Event[]
  Student Student[]
}
